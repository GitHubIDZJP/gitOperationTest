1.新建分之mac_dev并检出(切换到mmac_dev分支)
2.提交后，推送时选择mac_dev分支推送到origin
3 然后每次操作的当前分之(mac_dev)提交后再选择当前操作的分支(mac_dev)推送到origin(每次都这样操作)
注意：这只是分支推送到了origin,main分支并没有推送后，执行git clone操作，克隆下来的文件依旧不会有mac_dev的内容，
先双击main分支，然后鼠标放置mac_dev分支处，右击--合并mac_dev至main，然后推送至origin，选择main分支，这样就把分支并合并到main分支了，而且还把main分支推送到origin了， 队友另外一端的source执行"抓取"，再执行"拉取"操作，队友电脑的Sourcetree打开的项目里才有我这边推送的代码

tag:拉取会把你本地仓库没有 而远程仓库有的更新写到你本地中，

执行当前变更变基到mac_dev分支，提交代码后，再执行origin远程推送，失败
解决法子：执行-抓取，再执行拉取，再把mac_dev分支合并到main分支，再选择main分支推送到origin

desktop_dev分支新建

mac_dev分支写入文档--01

mac_dev分支写入文档--03

mac_dev分支是提交时直接勾选立即推送变更到 origin/mac_dev好，还是先提交再推送到orgin

解:选择直接推送还是先提交
直接推送到 origin/mac_dev：

这种方法适用于小的或临时的更改，可能在团队内部没有涉及多个人的协作。
不建议频繁使用，因为不提交到本地仓库会失去版本控制的好处。
先提交再推送：

这是推荐的工作流程，确保你在推送之前已清楚记录每次更改，并且可以更容易地回溯。
便于团队协作，其他人可以看到每次提交的信息，理解代码的变化。

sourcetree标签:
输入想要的标签名，标签代表这个代码状态或者功能
<<<<<<< HEAD

标签注解:一旦标签被创建，就可以在sourcetree的标签列表中看到它，可以通过点击标签来快速定位到对应的代码提交

注意: 标签只是在本地的底阿妈添加了一个标记，并不会自动推送到远程仓库，想要把标签推送到远程仓库，做远程操作推送就行，并选择包含标签选项
=======
>>>>>>> bf78c8e (标签功能)
