1.新建分之mac_dev并检出(切换到mmac_dev分支)
2.提交后，推送时选择mac_dev分支推送到origin
3 然后每次操作的当前分之(mac_dev)提交后再选择当前操作的分支(mac_dev)推送到origin(每次都这样操作)
注意：这只是分支推送到了origin,main分支并没有推送后，执行git clone操作，克隆下来的文件依旧不会有mac_dev的内容，
先双击main分支，然后鼠标放置mac_dev分支处，右击--合并mac_dev至main，然后推送至origin，选择main分支，这样就把分支并合并到main分支了，而且还把main分支推送到origin了， 队友另外一端的source执行"抓取"，再执行"拉取"操作，队友电脑的Sourcetree打开的项目里才有我这边推送的代码

tag:拉取会把你本地仓库没有 而远程仓库有的更新写到你本地中，

执行当前变更变基到mac_dev分支，提交代码后，再执行origin远程推送，失败
解决法子：执行-抓取，再执行拉取，再把mac_dev分支合并到main分支，再选择main分支推送到origin

desktop_dev分支新建

mac_dev分支写入文档--01

mac_dev分支写入文档--03

mac_dev分支是提交时直接勾选立即推送变更到 origin/mac_dev好，还是先提交再推送到orgin

解:选择直接推送还是先提交
直接推送到 origin/mac_dev：

这种方法适用于小的或临时的更改，可能在团队内部没有涉及多个人的协作。
不建议频繁使用，因为不提交到本地仓库会失去版本控制的好处。
先提交再推送：

这是推荐的工作流程，确保你在推送之前已清楚记录每次更改，并且可以更容易地回溯。
便于团队协作，其他人可以看到每次提交的信息，理解代码的变化。

sourcetree标签:
输入想要的标签名，标签代表这个代码状态或者功能

标签注解:一旦标签被创建，就可以在sourcetree的标签列表中看到它，可以通过点击标签来快速定位到对应的代码提交

注意: 标签只是在本地的底阿妈添加了一个标记，并不会自动推送到远程仓库，想要把标签推送到远程仓库，做远程操作推送就行，并选择包含标签选项

提交回滚test

超前版本问题:
在 Git 中，看到“超前2个版本”的提示通常是因为你本地的分支比远程分支多了两个提交。这可能是因为你在本地提交了更改，但还没有将这些更改推送到远程仓库。以下是解决这种情况的几种方法：
1. 直接推送本地更改到远程仓库
2. 拉取远程分支更新后再推送
3. 查看远程与本地的提交差异
4. 放弃本地更改并同步远程（如果不需要本地的两个提交）

通常，直接按提示的节点推送是最合适的选择。这样可以保持代码库的稳定和提交历史的清晰性

有一个问题，我是feature-A分支提交代码后，直接推导origin，还是提交后切换回main，然后拉取代码后从feature-A检出到main分之并合并后再推送到origin

在你使用 Git 开发时，选择在 feature-A 分支上提交并推送的方式有几种，下面我将解释这两种不同的操作流程及其优缺点：
1. 直接在 feature-A 分支提交并推送
这种方法是最直接的，适用于你只在 feature-A 分支上工作，并且你不需要 main 分支的最新更新：
 1.1 在 feature-A 分支上开发并提交代码
 2.1 将 feature-A 分支推送到远程
优点：

简单快速，不需要频繁切换分支。
保持了 feature-A 分支的独立性，其他团队成员可以直接查看或合并你的功能分支

缺点：

如果其他人在 main 分支上进行了更改，可能会在稍后合并时遇到冲突



2. 提交后切换到 main、拉取更新，然后合并

 这种方法适用于你想确保 feature-A 分支的基础是最新的 main 分支，以减少合并冲突的风险
   2.1 在 feature-A 分支上开发并提交代码：
   2.2 切换到 main 分支并拉取更新：
   2.3 切换回 feature-A 分支
   2.4 将 main 的更改合并到 feature-A
   2.5 解决可能的合并冲突，提交合并结果
   2.6 推送 feature-A 到远程

总结
选择哪种方式：
如果你的开发周期较长，且有可能会有其他人在 main 分支上进行更改，建议采用第二种方法，确保在合并之前保持 feature-A 的基础是最新的。
如果你确定 main 分支不会频繁变化，或者你只是在进行小的功能开发，第一种方式会更简单快捷。


  注意:
如果选择方法2，确保在将 feature-A 分支合并到 main 之前更新 main 分支以获取最新的代码，可以通过两种方式来进行更新，但它们的顺序和使用场景会有一些不同。

tag:
将 main 的更改合并到 feature-A 分支与将 feature-A 合并到 main 分支是两个不同的操作，具体的选择依赖于你的工作流程和团队协作的需求。以下是两者之间的区别及其适用场景：

1. 将 main 的更改合并到 feature-A
目的：确保你的功能分支在合并之前是基于最新的 main 分支。这是为了减少在将 feature-A 合并到 main 时可能遇到的合并冲突。

操作步骤：

在 feature-A 分支上进行开发并提交代码。
切换到 main 分支并拉取最新的更改。
切换回 feature-A 分支并将 main 的更改合并到 feature-A。
解决可能的冲突并提交合并结果。
将 feature-A 推送到远程。
优点：

你可以在 feature-A 分支上解决冲突，这样可以在最终合并到 main 之前进行充分的测试。
保证你的功能开发是基于最新的代码，减少最终合并时的麻烦。
2. 将 feature-A 合并到 main 并推送
目的：将开发完成的功能集成到主分支。通常在功能开发完成并经过测试后，才将其合并到 main。

操作步骤：

在 feature-A 分支上完成开发并提交代码。
切换到 main 分支并拉取最新的更改。
将 feature-A 合并到 main。
解决合并时的冲突（如有），并提交合并结果。
将 main 推送到远程。
优点：

这个过程确保所有最新的更改都已集成到主分支，从而保持主分支的稳定性和最新性。
为什么选择将 main 的更改合并到 feature-A？
减少冲突：在 feature-A 上提前解决可能的合并冲突，避免在合并到 main 时出现更复杂的冲突。
测试整合：可以在合并 main 的更改后，及时测试 feature-A 的功能是否正常，确保整合的代码是可用的。
开发灵活性：允许开发者在 feature-A 分支上进行必要的更改和调整，确保在提交到 main 时，代码是完整和无误的。
总结
将 main 的更改合并到 feature-A 是为了保持功能开发的顺利和稳定，确保在将功能合并到主分支之前一切都是正常的。
将 feature-A 合并到 main 是在功能开发完成后将其整合到主代码库的过程。
在实际的团队开发中，这两个操作通常是连续进行的：在 feature-A 分支上进行开发，确保它是基于最新的 main，然后在功能完成后再将它合并到 main 并推送到远程。这种方式有助于确保代码的稳定性和高效性。